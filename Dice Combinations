PROBLEM---
Your task is to count the number of ways to construct sum n by throwing a dice one or more times. 
Each throw produces an outcome between 1 and  6.

For example, if n=3, there are 4 ways:
1+1+1
1+2
2+1
3



/* RECURSION TLE --- MOVING THROUGH ALL POSSIBILITIES */
import java.util.*;
public class main{
    static int m=1000000007; 
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt(); 
        System.out.println(solve(n,0));
    }

    public static int solve(int n, int currsum){
        if(currsum==n) return 1;    //we reached our ans
        if(currsum>n) return 0;     //from here we cant reach our answer
        int ways=0;
        for(int j=1;j<=6;j++){
            ways = (ways + solve(n, currsum+j)) % m;
        }
        return ways;
    }
}

/*
LOGIC---
Objective : To make sum n with any number of dice throws we want.

So, let's observe through all possibilities using recursion
*/



/* DP MEMOISATION  STILL GIVES MLE*/
import java.util.*;
public class main{
    static int m=1000000007;
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        int memo[][] = new int[n+1][n*6+1];
        for(int rows[] : memo) Arrays.fill(rows, -1);
        System.out.println(solve(n, 0, memo));
    }

    public static int solve(int n, int currsum, int memo[][]){
        if(currsum==n) return 1;    //we reached our ans
        if(currsum>n) return 0;     //from here we cant reach our answer
        if(memo[n][currsum]!=-1) return memo[n][currsum];
        int ways=0;
        for(int j=1;j<=6;j++){
            ways = (ways + solve(n, currsum+j, memo)) % m;
        }
        return memo[n][currsum]=ways;
    }
}

/*
LOGIC---
The entry memo[i][j] represents the number of ways to reach a sum of 'i' with a current sum of 'j'. 
We initialize the array with -1 to indicate that the result hasn't been computed yet.
*/


/* DP TABULAR */
import java.util.*;
public class main{
    static int m=1000000007;
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
        int dp[] = new int[n+1];
        dp[0]=1;    //// Base case: There is one way to achieve sum 0 (don't throw any dice)
        // Compute the number of ways for each sum from 1 to n
        for (int i=1; i<=n; i++){   //caluclate every dp[i] from rolling a die
            for (int j=1; j<=6; j++){ 
                if(i>=j){   //its a simple check to want i>=j => becuase we cant add j=4 to make sum i=2, which is already less than j
                    dp[i] = (dp[i] + dp[i-j]) % m;
                }
            }
        }
        System.out.println(dp[n]);
    }
}


/*
LOGIC---
Now how to think in terms of DP.
Using recursion we can find maybe say ways to make sum 10.
But what would be easier if we knew how to make sum maybe 6 already and then caluclate remaining. 
So, if we need to calculate ways for 10 won't it be eaiser to already know ways if we knew how to make sum 9.

So, let's say we need to find dp[10], and w ehave calculatyed all the previous states.
If we roll dice with 2, then we would need to know the ways to make dp[8] + 2 = dp[10]
So, ways to make dp[8] + ways to make 2(i.e. dp[2]) = ways to make dp[10]


STATE => So, dp[n] = no of ways to get sum n
TRANSITION => dp[n] == dp[n-1] + dp[n-2] + dp[n-3] + dp[n-4] + dp[n-5] + dp[n-6] == i=n|SIGMA|i=1 dp[n-i];

*/
